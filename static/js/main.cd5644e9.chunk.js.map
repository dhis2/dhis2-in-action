{"version":3,"sources":["components/Legend.js","components/Category.js","utils/data.js","components/Sidebar.js","utils/graticule.js","components/Map.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["Legend","items","data","count","useMemo","year","lastYear","className","map","code","name","color","key","style","backgroundColor","Category","id","title","legend","selected","onClick","categories","showChart","parseData","rows","feed","entry","row","years","col","hasOwnProperty","slice","push","length","countries","forEach","country","y","letters","startsWith","replace","p","s","i","t","a","e","c","v","split","value","Sidebar","category","onChange","item","Graticule","GeoJSON","extend","options","weight","interval","initialize","L","Util","setOptions","this","_layers","sphere","addData","_getFrame","_getGraticule","type","coordinates","_getMeridian","concat","reverse","features","lng","_getFeature","toString","lat","_getParallel","_lngFix","coords","prop","geometry","properties","bounds","Map","height","useState","instance","setInstance","layer","setLayer","container","useRef","useEffect","current","crs","CRS","resolutions","maxZoom","fitBounds","invalidateSize","opacity","fillColor","fillOpacity","clickable","addTo","fetch","then","response","json","geoJSON","catch","error","console","log","find","eachLayer","setStyle","feature","CODE","some","includes","bringToFront","bringToBack","indexOf","bindPopup","NAME","content","filter","join","ref","Chart","show","chart","text","xAxis","tickmarkPlacement","enabled","yAxis","tooltip","plotOptions","area","stacking","lineColor","lineWidth","marker","series","yearRange","findIndex","remove","setCategories","setTitle","addSeries","App","hash","window","location","cat","substr","getInitialCategory","setCategory","setData","fetchJsonp","jsonpCallback","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cd5644e9.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport \"./Legend.css\";\n\nconst Legend = ({ items, data }) => {\n  const count = useMemo(() => (data ? data.year[data.lastYear] : {}), [data]);\n\n  return (\n    <div className=\"Legend\">\n      {items.map(({ code, name, color }) => (\n        <div key={code}>\n          <span style={{ backgroundColor: color }}></span> {name} ({count[code]}\n          )\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\nimport Legend from \"./Legend\";\nimport \"./Category.css\";\n\nconst Category = ({ id, title, legend, selected, data, onClick }) => (\n  <div\n    onClick={() => onClick(id)}\n    className={`Category${selected ? \" Category-selected\" : \"\"}`}\n  >\n    <h2>{title}</h2>\n    {selected && <Legend items={legend} data={data} />}\n  </div>\n);\n\nexport default Category;\n","import fetchJsonp from \"fetch-jsonp\";\n\nexport const categories = [\n  {\n    id: \"health\",\n    title: \"Health Information System\",\n    legend: [\n      { code: \"s\", name: \"National\", color: \"#238443\" },\n      { code: \"i\", name: \"Indian State\", color: \"#78c679\" },\n      { code: \"p\", name: \"Pilot\", color: \"#d9f0a3\" }\n    ],\n    showChart: true\n  },\n  {\n    id: \"covid-19\",\n    title: \"COVID-19\",\n    legend: [\n      { code: \"c\", name: \"Operational\", color: \"#d95f0e\" },\n      { code: \"v\", name: \"In development\", color: \"#fec44f\" }\n    ],\n    showChart: false\n  },\n  {\n    id: \"tracker\",\n    title: \"Tracker\",\n    legend: [{ code: \"t\", name: \"Tracker\", color: \"#e34a33\" }],\n    showChart: true\n  },\n  {\n    id: \"android\",\n    title: \"Android app\",\n    legend: [{ code: \"a\", name: \"Android app\", color: \"#2ca25f\" }],\n    showChart: true\n  },\n  {\n    id: \"emis\",\n    title: \"Education Management Information System (EMIS)\",\n    legend: [{ code: \"e\", name: \"DHIS2 for Education\", color: \"#1d91c0\" }],\n    showChart: false\n  }\n];\n\nconst parseData = data => {\n  const rows = data.feed.entry;\n  const row = rows[0];\n  const years = [];\n\n  for (let col in row) {\n    if (row.hasOwnProperty(col)) {\n      if (col.slice(0, 5) === \"gsx$y\") {\n        years.push(col.slice(-4));\n      }\n    }\n  }\n\n  const lastYear = years[years.length - 1];\n  const countries = {};\n  const year = {};\n\n  rows.forEach(row => {\n    const id = row[\"gsx$code\"][\"$t\"];\n    const name = row[\"gsx$name\"][\"$t\"];\n\n    const country = (countries[id] = {\n      name: name\n    });\n\n    years.forEach(y => {\n      let letters = row[\"gsx$y\" + y][\"$t\"];\n\n      // Remove and fix in google spreadsheet\n      if (id.startsWith(\"IN-\")) {\n        // s/p is not valid for indian states\n        letters = letters.replace(\"s\", \"\").replace(\"p\", \"\");\n      }\n\n      if (letters.length) {\n        country[y] = letters;\n\n        if (!year[y]) {\n          year[y] = {\n            p: 0, // pilot\n            s: 0, // national scale\n            i: 0, // indian state\n            t: 0, // tracker\n            a: 0, // android\n            e: 0, // education\n            c: 0, // covid-19\n            v: 0 // covid-19 (development)\n          };\n        }\n\n        letters.split(\"\").forEach(value => {\n          year[y][value]++;\n        });\n      }\n    });\n  });\n\n  return { countries, year, years, lastYear };\n};\n\nexport const getData = () =>\n  fetchJsonp(\n    \"//spreadsheets.google.com/feeds/list/1Fd-vBoJPjp5wdCyJc7d_LOJPOg5uqdzVa3Eq5-VFR-g/1/public/values?alt=json-in-script\",\n    { jsonpCallback: \"callback\" }\n  )\n    .then(response => response.json())\n    .then(parseData);\n","import React from \"react\";\nimport Category from \"./Category\";\nimport { categories } from \"../utils/data\";\nimport \"./Sidebar.css\";\n\nconst Sidebar = ({ category, data, onChange }) => (\n  <div className=\"Sidebar\">\n    <div className=\"Sidebar-header\">\n      <h1>DHIS2 in action</h1>\n      <p>\n        DHIS2 is in use all over the world. Check out different use cases with\n        this interactive map.\n      </p>\n    </div>\n    {categories.map(item => (\n      <Category\n        key={item.id}\n        onClick={onChange}\n        selected={category === item.id}\n        data={data}\n        {...item}\n      />\n    ))}\n  </div>\n);\n\nexport default Sidebar;\n","import L, { GeoJSON } from \"leaflet\";\n\nconst Graticule = GeoJSON.extend({\n  options: {\n    style: {\n      color: \"#333\",\n      weight: 1\n    },\n    interval: 20\n  },\n\n  initialize(options) {\n    L.Util.setOptions(this, options);\n    this._layers = {};\n\n    if (this.options.sphere) {\n      this.addData(this._getFrame());\n    } else {\n      this.addData(this._getGraticule());\n    }\n  },\n\n  _getFrame() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        this._getMeridian(-180).concat(this._getMeridian(180).reverse())\n      ]\n    };\n  },\n\n  _getGraticule() {\n    var features = [],\n      interval = this.options.interval;\n\n    // Meridians\n    for (var lng = 0; lng <= 180; lng = lng + interval) {\n      features.push(\n        this._getFeature(this._getMeridian(lng), {\n          name: lng ? lng.toString() + \"° E\" : \"Prime meridian\"\n        })\n      );\n      if (lng !== 0) {\n        features.push(\n          this._getFeature(this._getMeridian(-lng), {\n            name: lng.toString() + \"° W\"\n          })\n        );\n      }\n    }\n\n    // Parallels\n    for (var lat = 0; lat <= 90; lat = lat + interval) {\n      features.push(\n        this._getFeature(this._getParallel(lat), {\n          name: lat ? lat.toString() + \"° N\" : \"Equator\"\n        })\n      );\n      if (lat !== 0) {\n        features.push(\n          this._getFeature(this._getParallel(-lat), {\n            name: lat.toString() + \"° S\"\n          })\n        );\n      }\n    }\n\n    return {\n      type: \"FeatureCollection\",\n      features: features\n    };\n  },\n\n  _getMeridian(lng) {\n    lng = this._lngFix(lng);\n    var coords = [];\n    for (var lat = -90; lat <= 90; lat++) {\n      coords.push([lng, lat]);\n    }\n    return coords;\n  },\n\n  _getParallel(lat) {\n    var coords = [];\n    for (var lng = -180; lng <= 180; lng++) {\n      coords.push([this._lngFix(lng), lat]);\n    }\n    return coords;\n  },\n\n  _getFeature(coords, prop) {\n    return {\n      type: \"Feature\",\n      geometry: {\n        type: \"LineString\",\n        coordinates: coords\n      },\n      properties: prop\n    };\n  },\n\n  _lngFix(lng) {\n    if (lng >= 180) return 179.999999;\n    if (lng <= -180) return -179.999999;\n    return lng;\n  }\n});\n\nexport default Graticule;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { map, geoJSON } from \"leaflet\";\nimport { CRS } from \"proj4leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Graticule from \"../utils/graticule\";\nimport { categories } from \"../utils/data\";\nimport \"./Map.css\";\n\nconst noDataColor = \"#fff\";\n\nconst bounds = [\n  [-40, -90],\n  [50, 165]\n];\n\nconst Map = ({ category, data, height }) => {\n  const [instance, setInstance] = useState();\n  const [layer, setLayer] = useState();\n  const container = useRef();\n\n  useEffect(() => {\n    setInstance(\n      map(container.current, {\n        crs: new CRS(\n          \"ESRI:53009\",\n          \"+proj=moll +lon_0=0 +x_0=0 +y_0=0 +a=6371000 +b=6371000 +units=m +no_defs\",\n          {\n            resolutions: [50000, 40000, 30000, 20000, 10000, 5000, 2500, 1250]\n          }\n        ),\n        maxZoom: 7\n      }).fitBounds(bounds)\n    );\n  }, [container]);\n\n  useEffect(() => {\n    if (instance) {\n      instance.invalidateSize();\n      instance.fitBounds(bounds);\n    }\n  }, [instance, height]);\n\n  useEffect(() => {\n    if (instance) {\n      new Graticule({\n        sphere: true,\n        style: {\n          opacity: 0,\n          fillColor: \"#edf7ff\",\n          fillOpacity: 1,\n          clickable: false\n        }\n      }).addTo(instance);\n\n      fetch(\"./countries_indian_states.json\")\n        .then(response => response.json())\n        .then(features =>\n          setLayer(\n            geoJSON(features, {\n              color: \"#555\",\n              weight: 1,\n              fillColor: noDataColor,\n              fillOpacity: 0.75\n            }).addTo(instance)\n          )\n        )\n        .catch(error => console.log(error));\n    }\n  }, [instance, setLayer]);\n\n  useEffect(() => {\n    if (layer && category && data) {\n      const { countries, lastYear } = data;\n      const { legend } = categories.find(c => c.id === category);\n\n      layer.eachLayer(item =>\n        item.setStyle({\n          fillColor: noDataColor\n        })\n      );\n\n      layer.eachLayer(item => {\n        const code = item.feature.properties.CODE;\n\n        if (code && countries[code] && countries[code][lastYear]) {\n          const country = countries[code];\n          const letters = country[lastYear];\n\n          // India: show country or states\n          if (code === \"IN\") {\n            if (legend.some(({ code }) => letters.includes(code))) {\n              item.bringToFront();\n            } else {\n              item.bringToBack();\n            }\n          }\n\n          legend.forEach(({ code, color }) => {\n            if (letters.indexOf(code) !== -1) {\n              item.setStyle({\n                fillColor: color\n              });\n            }\n          });\n        }\n      });\n\n      layer.bindPopup(({ feature }) => {\n        const { CODE, NAME } = feature.properties;\n        const country = data.countries[CODE];\n        const name = `<h2>${NAME}</h2>`;\n\n        if (!country) {\n          return name;\n        }\n\n        const items = legend\n          .map(i => ({\n            ...i,\n            year: data.years.find(\n              y => country[y] && country[y].includes(i.code)\n            )\n          }))\n          .filter(i => i.year);\n\n        const content = items.map(\n          ({ name, year }) =>\n            `${\n              name.includes(\"National\")\n                ? CODE.includes(\"-\")\n                  ? \"State\"\n                  : \"National\"\n                : name\n            }: ${year}`\n        );\n\n        return `${name}${content.join(\"<br/>\")}`;\n      });\n    }\n  }, [layer, category, data]);\n\n  return <div ref={container} className=\"Map\" style={{ height }}></div>;\n};\n\nexport default Map;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { chart } from \"highcharts\";\nimport { categories } from \"../utils/data\";\nimport \"./Chart.css\";\n\nconst Chart = ({ category, data, show }) => {\n  const [instance, setInstance] = useState();\n  const container = useRef();\n\n  useEffect(() => {\n    setInstance(\n      chart(\"chart\", {\n        chart: {\n          type: \"area\"\n        },\n        title: {\n          text: null // 'Countries using DHIS 2'\n        },\n        xAxis: {\n          tickmarkPlacement: \"on\",\n          title: {\n            enabled: false\n          }\n        },\n        yAxis: {\n          title: {\n            text: \"Countries using DHIS2\"\n          }\n        },\n        tooltip: {\n          split: true\n        },\n        plotOptions: {\n          area: {\n            stacking: \"normal\",\n            lineColor: \"#666666\",\n            lineWidth: 1,\n            marker: {\n              lineWidth: 1,\n              lineColor: \"#666666\"\n            }\n          }\n        },\n        series: [],\n        legend: {\n          enabled: false\n        }\n      })\n    );\n  }, [container]);\n\n  useEffect(() => {\n    if ((instance, category, data)) {\n      const { series, xAxis, yAxis } = instance;\n      const { title, legend } = categories.find(c => c.id === category);\n      const { years, year } = data;\n\n      const yearRange = years.slice(\n        years.findIndex(y => legend.some(({ code }) => year[y][code]))\n      );\n\n      while (series.length) {\n        series[0].remove();\n      }\n\n      xAxis[0].setCategories(yearRange);\n      yAxis[0].setTitle({ text: `${title} implementations` });\n\n      legend\n        .slice()\n        .reverse()\n        .forEach(({ code, name, color }) =>\n          instance.addSeries({\n            name: name,\n            data: yearRange.map(y => year[y][code]),\n            color: color\n          })\n        );\n    }\n  }, [instance, category, data]);\n\n  return (\n    <div\n      id=\"chart\"\n      ref={container}\n      className={`Chart Chart-${show ? \"show\" : \"hide\"}`}\n    ></div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Map from \"./components/Map\";\nimport Chart from \"./components/Chart\";\nimport { categories, getData } from \"./utils/data\";\nimport \"./App.css\";\n\nconst getInitialCategory = () => {\n  const { hash } = window.location;\n\n  if (hash) {\n    const cat = hash.substr(1);\n\n    if (categories.find(c => c.id === cat)) {\n      return cat;\n    }\n  }\n\n  return \"health\"; // Default category\n};\n\nconst App = () => {\n  const [category, setCategory] = useState(getInitialCategory());\n  const [data, setData] = useState();\n  const { showChart } = categories.find(c => c.id === category);\n\n  useEffect(() => {\n    getData().then(setData);\n  }, []);\n\n  useEffect(() => {\n    window.location.hash = `#${category}`;\n  }, [category]);\n\n  return (\n    <div className=\"App\">\n      <Sidebar category={category} data={data} onChange={setCategory} />\n      <div className=\"App-main\">\n        <Map\n          category={category}\n          data={data}\n          height={showChart ? \"58%\" : \"100%\"}\n        />\n        <Chart category={category} data={data} show={showChart} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}